{"version":3,"file":"static/js/home-view.477b379f.chunk.js","mappings":"0OAGaA,EAAKC,EAAAA,GAAAA,GAAH,2KASFC,GAAYD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,4PAcTG,EAAKH,EAAAA,GAAAA,GAAH,+RAaFI,EAAMJ,EAAAA,GAAAA,IAAH,oG,mBCjCD,SAASK,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAWC,EAAAA,EAAAA,MAQjB,OAPAC,QAAQC,IAAIH,IACZI,EAAAA,EAAAA,YAAU,WACJN,GACFC,EAASD,EAEZ,GAAE,CAACA,KAGF,8BACGF,IACC,SAACP,EAAD,UACGO,EAAOS,KAAI,YAAuC,IAApCC,EAAmC,EAAnCA,GAAIC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACxBC,EAAM,yCAAqCD,GACjD,OACE,SAAChB,EAAD,WACE,UAACF,EAAD,CAAWoB,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMb,GAA/C,WACE,SAACN,EAAD,CAAKoB,IAAKL,EAAcC,EAASK,EAAUC,IAAKR,IAAS,IACxDD,GAAgBC,MAHZF,EAOZ,OAKV,C,2ECjCKW,EAAU,mCACVC,EAAW,+BAEXC,EAAkB,mCAAG,sGACFC,IAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAFnB,uBACjBI,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,qDAOlBC,EAAe,mCAAG,WAAMC,GAAN,yFACCJ,IAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,kBACgCO,IAFjC,uBACdH,EADc,EACdA,KADc,kBAIfA,EAAKC,SAJU,2CAAH,sDAOfG,EAAc,mCAAG,WAAMC,GAAN,uFACEN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,oBACmBT,EADnB,oBADF,cACfU,EADe,yBAIdA,EAASN,MAJK,2CAAH,sDAMdO,EAAc,mCAAG,WAAMF,GAAN,uFACEN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BT,EAD3B,oBADF,cACfU,EADe,yBAIdA,EAASN,KAAKQ,MAJA,2CAAH,sDAOdC,EAAgB,mCAAG,WAAMJ,GAAN,uFACAN,IAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BAC2BT,EAD3B,2BADA,cACjBU,EADiB,yBAIhBA,EAASN,KAAKC,SAJE,2CAAH,sDAOhBS,EAAU,CACdZ,mBAAAA,EACAI,gBAAAA,EACAE,eAAAA,EACAG,eAAAA,EACAE,iBAAAA,GAEF,K,wHCzCe,SAASE,IACtB,OAA2BnC,EAAAA,EAAAA,UAAS,IAApC,eAAOD,EAAP,KAAeqC,EAAf,KAMA,OAJA7B,EAAAA,EAAAA,YAAU,WACR8B,EAAAA,EAAAA,qBAAyBC,MAAK,SAAAvC,GAAM,OAAIqC,EAASrC,EAAb,GACrC,GAAE,KAGD,+BACE,SAAC,IAAD,CAAWA,OAAQA,KAGxB,C","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","services/fetchMovies.jsx","views/HomePage/HomePage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Ul = styled.ul`\n  list-style: none;\n  display: grid;\n  grid-template-columns: repeat(6, 1fr);\n  background-color: #e9def0;\n  padding-top: 48px;\n  margin: 0;\n`;\n\nexport const StyleLink = styled(Link)`\n  display: block;\n  color: black;\n  font-size: 16px;\n  font-weight: 400;\n  border-bottom: 2px solid transparent;\n  text-decoration: none;\n  margin-right: 20px;\n  &:hover {\n    cursor: pointer;\n    color: #806d8c;\n  }\n`;\n\nexport const Li = styled.li`\n  margin-right: 16px;\n  text-align: center;\n  box-shadow: rgba(50, 50, 93, 0.25) 0px 13px 27px -5px,\n    rgba(0, 0, 0, 0.3) 0px 8px 16px -8px;\n  border-radius: 4px;\n  margin-bottom: 12px;\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.03);\n  }\n`;\n\nexport const Img = styled.img`\n  height: auto;\n  width: 100%;\n  border-radius: 4px;\n  cursor: pointer;\n`;\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { StyleLink, Li, Img, Ul } from './MovieList.styled';\nimport notfound from '../../images/notfound.png';\n\nexport default function MovieList({ movies }) {\n  const [query, setQuery] = useState('');\n  const location = useLocation();\n  console.log(location);\n  useEffect(() => {\n    if (query) {\n      setQuery(query);\n    }\n  }, [query]);\n\n  return (\n    <>\n      {movies && (\n        <Ul>\n          {movies.map(({ id, title, name, poster_path }) => {\n            const poster = `https://image.tmdb.org/t/p/w342${poster_path}`;\n            return (\n              <Li key={id}>\n                <StyleLink to={`/movies/${id}`} state={{ from: location }}>\n                  <Img src={poster_path ? poster : notfound} alt={name} />{' '}\n                  {title ? title : name}\n                </StyleLink>\n              </Li>\n            );\n          })}\n        </Ul>\n      )}\n    </>\n  );\n}\n\nMovieList.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n","import axios from 'axios';\n\nconst API_KEY = '1abcab100520369e11a771de2f4e2532';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nconst fetchPopularMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data.results;\n};\n\nconst fetchMoviesName = async inputValue => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${inputValue}`\n  );\n  return data.results;\n};\n\nconst fetchMovieById = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\nconst fetchFilmCasts = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nconst fetchFilmReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n\nconst fetches = {\n  fetchPopularMovies,\n  fetchMoviesName,\n  fetchMovieById,\n  fetchFilmCasts,\n  fetchFilmReviews,\n};\nexport default fetches;\n","import { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from '../../components/MovieList/MovieList';\nimport api from '../../services/fetchMovies';\n\nexport default function HomePage() {\n  const [movies, setMovie] = useState([]);\n\n  useEffect(() => {\n    api.fetchPopularMovies().then(movies => setMovie(movies));\n  }, []);\n\n  return (\n    <>\n      <MovieList movies={movies} />\n    </>\n  );\n}\n\nHomePage.propTypes = {\n  movies: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    poster_path: PropTypes.string.isRequired,\n  }),\n};\n"],"names":["Ul","styled","StyleLink","Link","Li","Img","MovieList","movies","useState","query","setQuery","location","useLocation","console","log","useEffect","map","id","title","name","poster_path","poster","to","state","from","src","notfound","alt","API_KEY","BASE_URL","fetchPopularMovies","axios","data","results","fetchMoviesName","inputValue","fetchMovieById","movieId","response","fetchFilmCasts","cast","fetchFilmReviews","fetches","HomePage","setMovie","api","then"],"sourceRoot":""}